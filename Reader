package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
/**
 * Reader Class
 * @author team 54
 * @version 12/1/18
 */
public class Reader
{
    private static final String COMMA_DELIMITER = ",";

    private static Scanner scanner;
    private static ArrayList<Song> array;
    private static Scanner data;
    //private static Tallier tallier;

    /**
     * Constructor for the class that takes 2 
     * strings in
     * @param name1
     * @param name2
     */
    public Reader(String name1, String name2)
    {
        array = new ArrayList<Song>();
        try
        {
            scanner = new Scanner(new File(name1));
            data = new Scanner(new File(name2));
            scanner.nextLine();
            data.nextLine();
            while (scanner.hasNextLine())
            {
                array.add(makeSong());
            }
            while (data.hasNextLine())
            {
                makeAndAdd();
            }

        }
        catch (FileNotFoundException fe)
        {
            fe.printStackTrace();
        }
        finally
        {
            scanner.close();
            data.close();
        }
        //tallier = new Tallier(array);
        GUISurveyWindow window = new GUISurveyWindow();
    }


    /**
     * This method creates and adds participants to the heard,
     * liked, noHeard, and noLike lists based on the validity
     * and response of the Participant created.
     */
    private static void makeAndAdd()
    {
        Participant part = null;
        String line = data.nextLine();
        Scanner read = new Scanner(line);
        try
        {
            read.useDelimiter(COMMA_DELIMITER);
            read.next();
            read.next();
            MajorEnum major = convertMajor(read.next());
            StateEnum state = convertState(read.next());
            HobbyEnum hobby = convertHobby(read.next());
            part = new Participant(major, state, hobby);

            if (part.isValid())
            {

                int count = 0;
                while (read.hasNext())
                { // reads through the line for responses.
                    String one = read.next();
                    part.setResponse(one);
                    // half of count is used since every 2 responses = 1 song.
                    Song song = array.get(count / 2);
                    // reference this Song's lists for easier access.
                    ArrayList<Participant> heard = song.getList("heard");
                    ArrayList<Participant> like = song.getList("like");
                    ArrayList<Participant> noHeard = song.getList("noheard");
                    ArrayList<Participant> noLike = song.getList("nolike");

                    if (one.equals("Yes"))
                    { // adds to heard/like list.
                        if (count % 2 == 0)
                        { // heard list since even.
                            song.addToList(heard, part);
                        }
                        else
                        { // like list since odd.
                            song.addToList(like, part);
                        }
                    }
                    if (one.equals("No"))
                    { // adds to noHeard/noLike list.
                        if (count % 2 == 0)
                        { // noHeard since even.
                            song.addToList(noHeard, part);
                        }
                        else
                        { // noLike since odd.
                            song.addToList(noLike, part);
                        }
                    }
                    count++;
                }
            }
        }
        finally
        {
            read.close();
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for Hobby.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of Hobby.
     */
    public static HobbyEnum convertHobby(String text)
    {
        switch (text)
        {
            case "sports":
                return HobbyEnum.SPORTS;
            case "art":
                return HobbyEnum.ART;
            case "music":
                return HobbyEnum.MUSIC;
            case "reading":
                return HobbyEnum.READING;
            default:
                return null;
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for Major.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of Major.
     */
    private static MajorEnum convertMajor(String text)
    {
        switch (text)
        {
            case "Computer Science":
                return MajorEnum.CS;
            case "Other Engineering":
                return MajorEnum.ENGINEER;
            case "Math or CMDA":
                return MajorEnum.MATH;
            case "Other":
                return MajorEnum.OTHER;
            default:
                return null;
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for State.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of State.
     */
    private static StateEnum convertState(String text)
    {
        switch (text)
        {
            case "Northeast":
                return StateEnum.NE;
            case "Outside of United States":
                return StateEnum.OUT;
            case "United States (other than Southeast or Northwest)":
                return StateEnum.REST;
            case "Southeast":
                return StateEnum.SE;
            default:
                return null;
        }
    }


    /**
     * Helper function used to make a song object to add to a list.
     * 
     * @return Song the song made.
     */
    private static Song makeSong()
    {
        Song song = null;
        String line = scanner.nextLine();
        Scanner data = new Scanner(line);
        try
        {
            data.useDelimiter(COMMA_DELIMITER);
            String name = null;
            String artist = null;
            int year = 0;
            String genre = null;
            while (data.hasNext())
            {
                name = data.next();
                artist = data.next();
                year = Integer.parseInt(data.next());
                genre = data.next();
            }
            song = new Song(name, artist, year, genre);
        }
        finally
        {
            data.close();
        }
        return song;
    }


    /**
     * Creates a comparator with the sort parameter passed to the comparator.
     * Then sorts the array based on a switch case within the comparator.
     * 
     * @param sort
     *            this is the way in which to sort the list.
     * @return ArrayList<Song> this is the updated and sorted list.
     */
    public static ArrayList<Song> sortedList(SongSortingEnum sort)
    {
        SongComparator c = new SongComparator(sort);
        ArrayList<Song> sorted = array;
        sorted.sort(c);
        return sorted;
    }


    /**
     * This method returns the percentage of responses
     * using this formula: x * 100 / x + y, where x is yes's
     * and y is no's if x is not zero.
     * 
     * @param x
     *            the number of yes responses.
     * @param y
     *            the number of no responses.
     * @return the percentage of yes's out of total responses.
     */
    private static int doMath(int x, int y)
    {
        if (x == 0)
        {
            return 0;
        }
        else
        {
            return x * 100 / (x + y);
        }
    }


    /**
     * Makes a count of who likes what song from
     * each hobby, major, and region
     * @param list the song list to gather tallies
     * @return tallies the info
     */
    public static SongTally[] hobbyTallies(ArrayList<Song> list)
    {
        SongTally[] tallies = new SongTally[list.size()];
        for (int i = 0; i < list.size(); i++)
        {
            Song song = list.get(i); // reference the current song
            SongTally tally = new SongTally();

            ArrayList<Participant> heard = song.getList("heard");
            ArrayList<Participant> noHeard = song.getList("noheard");

            int reading = song.getHobbyCount(heard, HobbyEnum.READING);
            int art = song.getHobbyCount(heard, HobbyEnum.ART);
            int sports = song.getHobbyCount(heard, HobbyEnum.SPORTS);
            int music = song.getHobbyCount(heard, HobbyEnum.MUSIC);
            int noHeardRead = song.getHobbyCount(noHeard, HobbyEnum.READING);
            int noHeardArt = song.getHobbyCount(noHeard, HobbyEnum.ART);
            int noHeardSport = song.getHobbyCount(noHeard, HobbyEnum.SPORTS);
            int noHeardMusic = song.getHobbyCount(noHeard, HobbyEnum.MUSIC);

            reading = doMath(reading, noHeardRead);
            art = doMath(art, noHeardArt);
            sports = doMath(sports, noHeardSport);
            music = doMath(music, noHeardMusic);

            tally.setTallies("heard", 0, reading);
            tally.setTallies("heard", 1, art);
            tally.setTallies("heard", 2, sports);
            tally.setTallies("heard", 3, music);

            ArrayList<Participant> like = song.getList("like");
            ArrayList<Participant> noLike = song.getList("nolike");
            int likeRead = song.getHobbyCount(like, HobbyEnum.READING);
            int likeArt = song.getHobbyCount(like, HobbyEnum.ART);
            int likeSports = song.getHobbyCount(like, HobbyEnum.SPORTS);
            int likeMusic = song.getHobbyCount(like, HobbyEnum.MUSIC);

            int noLikeRead = song.getHobbyCount(noLike, HobbyEnum.READING);
            int noLikeArt = song.getHobbyCount(noLike, HobbyEnum.ART);
            int noLikeSport = song.getHobbyCount(noLike, HobbyEnum.SPORTS);
            int noLikeMusic = song.getHobbyCount(noLike, HobbyEnum.MUSIC);

            likeRead = doMath(likeRead, noLikeRead);
            likeArt = doMath(likeArt, noLikeArt);
            likeSports = doMath(likeSports, noLikeSport);
            likeMusic = doMath(likeMusic, noLikeMusic);

            tally.setTallies("liked", 0, likeRead);
            tally.setTallies("liked", 1, likeArt);
            tally.setTallies("liked", 2, likeSports);
            tally.setTallies("liked", 3, likeMusic);

            tallies[i] = tally;

        }
        return tallies;
    }


    /**
     * Tallies up for the major people
     * @param list the song list to gather tallies
     * @return tallies the number
     */
    public static SongTally[] majorTallies(ArrayList<Song> list)
    {
        SongTally[] tallies = new SongTally[list.size()];
        for (int i = 0; i < list.size(); i++)
        {
            Song song = list.get(i); // reference the current song
            SongTally tally = new SongTally();

            ArrayList<Participant> heard = song.getList("heard");
            ArrayList<Participant> noHeard = song.getList("noheard");

            int cs = song.getMajorCount(heard, MajorEnum.CS);
            int engineer = song.getMajorCount(heard, MajorEnum.ENGINEER);
            int math = song.getMajorCount(heard, MajorEnum.MATH);
            int other = song.getMajorCount(heard, MajorEnum.OTHER);
            int noHeardCS = song.getMajorCount(noHeard, MajorEnum.CS);
            int noHeardEngineer = song.getMajorCount(noHeard,
                MajorEnum.ENGINEER);
            int noHeardMath = song.getMajorCount(noHeard, MajorEnum.MATH);
            int noHeardOther = song.getMajorCount(noHeard, MajorEnum.OTHER);

            cs = doMath(cs, noHeardCS);
            engineer = doMath(engineer, noHeardEngineer);
            math = doMath(math, noHeardMath);
            other = doMath(other, noHeardOther);

            tally.setTallies("heard", 0, cs);
            tally.setTallies("heard", 1, engineer);
            tally.setTallies("heard", 2, math);
            tally.setTallies("heard", 3, other);

            ArrayList<Participant> like = song.getList("like");
            ArrayList<Participant> noLike = song.getList("nolike");
            int likeCS = song.getMajorCount(like, MajorEnum.CS);
            int likeEngineer = song.getMajorCount(like, MajorEnum.ENGINEER);
            int likeMath = song.getMajorCount(like, MajorEnum.MATH);
            int likeOther = song.getMajorCount(like, MajorEnum.OTHER);
            int noLikeCS = song.getMajorCount(noLike, MajorEnum.CS);
            int noLikeEngineer = song.getMajorCount(noLike, MajorEnum.ENGINEER);
            int noLikeMath = song.getMajorCount(noLike, MajorEnum.MATH);
            int noLikeOther = song.getMajorCount(noLike, MajorEnum.OTHER);

            likeCS = doMath(cs, noLikeCS);
            likeEngineer = doMath(likeEngineer, noLikeEngineer);
            likeMath = doMath(likeMath, noLikeMath);
            likeOther = doMath(likeOther, noLikeOther);

            tally.setTallies("liked", 0, likeCS);
            tally.setTallies("liked", 1, likeEngineer);
            tally.setTallies("liked", 2, likeMath);
            tally.setTallies("liked", 3, likeOther);

            tallies[i] = tally;

        }
        return tallies;
    }


    /**
     * Gets the data for the state people
     * @param list the song list to gather tallies
     * @return tallies a number array
     */
    public static SongTally[] stateTallies(ArrayList<Song> list)
    {
        SongTally[] tallies = new SongTally[list.size()];
        for (int i = 0; i < list.size(); i++)
        {
            Song song = list.get(i); // reference the current song
            SongTally tally = new SongTally();

            ArrayList<Participant> heard = song.getList("heard");
            ArrayList<Participant> noHeard = song.getList("noheard");

            int ne = song.getStateCount(heard, StateEnum.NE);
            int out = song.getStateCount(heard, StateEnum.OUT);
            int rest = song.getStateCount(heard, StateEnum.REST);
            int se = song.getStateCount(heard, StateEnum.SE);
            int noHeardNE = song.getStateCount(noHeard, StateEnum.NE);
            int noHeardOut = song.getStateCount(noHeard, StateEnum.OUT);
            int noHeardRest = song.getStateCount(noHeard, StateEnum.REST);
            int noHeardSE = song.getStateCount(noHeard, StateEnum.SE);

            ne = doMath(ne, noHeardNE);
            out = doMath(out, noHeardOut);
            rest = doMath(rest, noHeardRest);
            se = doMath(se, noHeardSE);

            tally.setTallies("heard", 0, ne); // indices
            tally.setTallies("heard", 1, out);
            tally.setTallies("heard", 2, rest);
            tally.setTallies("heard", 3, se);

            ArrayList<Participant> like = song.getList("like");
            ArrayList<Participant> noLike = song.getList("nolike");

            int likedNE = song.getStateCount(like, StateEnum.NE);
            int likedOut = song.getStateCount(like, StateEnum.OUT);
            int likedRest = song.getStateCount(like, StateEnum.REST);
            int likedSE = song.getStateCount(like, StateEnum.SE);
            int noLikeNE = song.getStateCount(noLike, StateEnum.NE);
            int noLikeOut = song.getStateCount(noLike, StateEnum.OUT);
            int noLikeRest = song.getStateCount(noLike, StateEnum.REST);
            int noLikeSE = song.getStateCount(noLike, StateEnum.SE);

            likedNE = doMath(likedNE, noLikeNE);
            likedOut = doMath(likedOut, noLikeOut);
            likedRest = doMath(likedRest, noLikeRest);
            likedSE = doMath(likedSE, noLikeSE);

            tally.setTallies("liked", 0, likedNE); // Indices
            tally.setTallies("liked", 1, likedOut);
            tally.setTallies("liked", 2, likedRest);
            tally.setTallies("liked", 3, likedSE);

            tallies[i] = tally;

        }
        return tallies;
    }
}
