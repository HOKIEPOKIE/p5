package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * This is the Input class which reads data from files
 * passed to main() and sorts the lists created.
 * 
 * @author Team 54
 * @version 2018.11.15
 */
public class Input
{
    private static final String COMMA_DELIMITER = ",";

    private static Scanner scanner;
    private static ArrayList<Song> array;
    private static Scanner data;


    /**
     * This is the main method for this program which
     * takes in file names from args and reads a list
     * of songs and the survey data then outputs the sorted
     * list based on a given command (in this case genre then
     * title) and the count of responses based on the hobby
     * of the participants.
     * 
     * @param args
     *            this is the array of strings that contain
     *            the filenames.
     */
    public static void main(String args[])
    {
        array = new ArrayList<Song>();
        try
        {
            scanner = new Scanner(new File(args[1]));
            data = new Scanner(new File(args[0]));
            scanner.nextLine();
            data.nextLine();
            while (scanner.hasNextLine())
            {
                array.add(makeSong());
            }
            while (data.hasNextLine())
            {
                makeAndAdd();
            }

        }
        catch (FileNotFoundException fe)
        {
            fe.printStackTrace();
        }
        finally
        {
            scanner.close();
            data.close();
        }
        sortByGenre();
        sortByTitle();
    }


    /**
     * Outputs the console based string representation of the list of
     * songs sorted by genre along with the tally of yes responses
     * out of total responses.
     */
    public static void sortByGenre()
    {
        ArrayList<Song> genre = sortedList(SongSortingEnum.GENRE);
        for (int i = 0; i < genre.size(); i++)
        {
            Song song = genre.get(i); // reference the current song
            System.out.println("Song Title: " + song.getTitle());
            System.out.println("Song Artist: " + song.getArtist());
            System.out.println("Song Genre: " + song.getGenre());
            System.out.println("Song Year: " + song.getYear());
            System.out.println("Heard");
            ArrayList<Participant> heard = song.getList("heard");
            ArrayList<Participant> noHeard = song.getList("noheard");
            int reading = song.getHobbyCount(heard, HobbyEnum.READING);
            int art = song.getHobbyCount(heard, HobbyEnum.ART);
            int sports = song.getHobbyCount(heard, HobbyEnum.SPORTS);
            int music = song.getHobbyCount(heard, HobbyEnum.MUSIC);
            int noHeardRead = song.getHobbyCount(noHeard, HobbyEnum.READING);
            int noHeardArt = song.getHobbyCount(noHeard, HobbyEnum.ART);
            int noHeardSport = song.getHobbyCount(noHeard, HobbyEnum.SPORTS);
            int noHeardMusic = song.getHobbyCount(noHeard, HobbyEnum.MUSIC);

            reading = doMath(reading, noHeardRead);
            art = doMath(art, noHeardArt);
            sports = doMath(sports, noHeardSport);
            music = doMath(music, noHeardMusic);

            System.out.println("reading:" + reading + " art:" + art + " sports:"
                + sports + " music:" + music);

            System.out.println("Likes");
            ArrayList<Participant> like = song.getList("like");
            ArrayList<Participant> noLike = song.getList("nolike");
            int likeRead = song.getHobbyCount(like, HobbyEnum.READING);
            int likeArt = song.getHobbyCount(like, HobbyEnum.ART);
            int likeSports = song.getHobbyCount(like, HobbyEnum.SPORTS);
            int likeMusic = song.getHobbyCount(like, HobbyEnum.MUSIC);

            int noLikeRead = song.getHobbyCount(noLike, HobbyEnum.READING);
            int noLikeArt = song.getHobbyCount(noLike, HobbyEnum.ART);
            int noLikeSport = song.getHobbyCount(noLike, HobbyEnum.SPORTS);
            int noLikeMusic = song.getHobbyCount(noLike, HobbyEnum.MUSIC);

            likeRead = doMath(likeRead, noLikeRead);
            likeArt = doMath(likeArt, noLikeArt);
            likeSports = doMath(likeSports, noLikeSport);
            likeMusic = doMath(likeMusic, noLikeMusic);
            System.out.println("reading:" + likeRead + " art:" + likeArt
                + " sports:" + likeSports + " music:" + likeMusic);
            System.out.println();
        }
    }


    /**
     * Outputs a console based string representation of the list of songs
     * sorted by title along with the tally of yes responses out of total
     * responses.
     */
    public static void sortByTitle()
    {
        ArrayList<Song> title = sortedList(SongSortingEnum.TITLE);
        for (int i = 0; i < title.size(); i++)
        {
            Song song = title.get(i);
            System.out.println("Song Title: " + song.getTitle());
            System.out.println("Song Artist: " + song.getArtist());
            System.out.println("Song Genre: " + song.getGenre());
            System.out.println("Song Year: " + song.getYear());
            System.out.println("Heard");
            ArrayList<Participant> heard = song.getList("heard");
            ArrayList<Participant> noHeard = song.getList("noheard");
            int reading = song.getHobbyCount(heard, HobbyEnum.READING);
            int art = song.getHobbyCount(heard, HobbyEnum.ART);
            int sports = song.getHobbyCount(heard, HobbyEnum.SPORTS);
            int music = song.getHobbyCount(heard, HobbyEnum.MUSIC);
            int noHeardRead = song.getHobbyCount(noHeard, HobbyEnum.READING);
            int noHeardArt = song.getHobbyCount(noHeard, HobbyEnum.ART);
            int noHeardSport = song.getHobbyCount(noHeard, HobbyEnum.SPORTS);
            int noHeardMusic = song.getHobbyCount(noHeard, HobbyEnum.MUSIC);

            reading = doMath(reading, noHeardRead);
            art = doMath(art, noHeardArt);
            sports = doMath(sports, noHeardSport);
            music = doMath(music, noHeardMusic);

            System.out.println("reading:" + reading + " art:" + art + " sports:"
                + sports + " music:" + music);

            System.out.println("Likes");
            ArrayList<Participant> like = song.getList("like");
            ArrayList<Participant> noLike = song.getList("nolike");
            int likeRead = song.getHobbyCount(like, HobbyEnum.READING);
            int likeArt = song.getHobbyCount(like, HobbyEnum.ART);
            int likeSports = song.getHobbyCount(like, HobbyEnum.SPORTS);
            int likeMusic = song.getHobbyCount(like, HobbyEnum.MUSIC);

            int noLikeRead = song.getHobbyCount(noLike, HobbyEnum.READING);
            int noLikeArt = song.getHobbyCount(noLike, HobbyEnum.ART);
            int noLikeSport = song.getHobbyCount(noLike, HobbyEnum.SPORTS);
            int noLikeMusic = song.getHobbyCount(noLike, HobbyEnum.MUSIC);

            likeRead = doMath(likeRead, noLikeRead);
            likeArt = doMath(likeArt, noLikeArt);
            likeSports = doMath(likeSports, noLikeSport);
            likeMusic = doMath(likeMusic, noLikeMusic);
            System.out.println("reading:" + likeRead + " art:" + likeArt
                + " sports:" + likeSports + " music:" + likeMusic);
            System.out.println();
        }
    }


    /**
     * This method returns the percentage of responses
     * using this formula: x * 100 / x + y, where x is yes's
     * and y is no's if x is not zero.
     * 
     * @param x
     *            the number of yes responses.
     * @param y
     *            the number of no responses.
     * @return the percentage of yes's out of total responses.
     */
    private static int doMath(int x, int y)
    {
        if (x == 0)
        {
            return 0;
        }
        else
        {
            return x * 100 / (x + y);
        }
    }


    /**
     * This method creates and adds participants to the heard,
     * liked, noHeard, and noLike lists based on the validity
     * and response of the Participant created.
     */
    private static void makeAndAdd()
    {
        Participant part = null;
        String line = data.nextLine();
        Scanner read = new Scanner(line);
        try
        {
            read.useDelimiter(COMMA_DELIMITER);
            read.next();
            read.next();
            MajorEnum major = convertMajor(read.next());
            StateEnum state = convertState(read.next());
            HobbyEnum hobby = convertHobby(read.next());
            part = new Participant(major, state, hobby);

            if (part.isValid())
            {

                int count = 0;
                while (read.hasNext())
                { // reads through the line for responses.
                    String one = read.next();
                    part.setResponse(one);
                    // half of count is used since every 2 responses = 1 song.
                    Song song = array.get(count / 2);
                    // reference this Song's lists for easier access.
                    ArrayList<Participant> heard = song.getList("heard");
                    ArrayList<Participant> like = song.getList("like");
                    ArrayList<Participant> noHeard = song.getList("noheard");
                    ArrayList<Participant> noLike = song.getList("nolike");

                    if (one.equals("Yes"))
                    { // adds to heard/like list.
                        if (count % 2 == 0)
                        { // heard list since even.
                            song.addToList(heard, part);
                        }
                        else
                        { // like list since odd.
                            song.addToList(like, part);
                        }
                    }
                    if (one.equals("No"))
                    { // adds to noHeard/noLike list.
                        if (count % 2 == 0)
                        { // noHeard since even.
                            song.addToList(noHeard, part);
                        }
                        else
                        { // noLike since odd.
                            song.addToList(noLike, part);
                        }
                    }
                    count++;
                }
            }
        }
        finally
        {
            read.close();
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for Hobby.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of Hobby.
     */
    public static HobbyEnum convertHobby(String text)
    {
        switch (text)
        {
            case "sports":
                return HobbyEnum.SPORTS;
            case "art":
                return HobbyEnum.ART;
            case "music":
                return HobbyEnum.MUSIC;
            case "reading":
                return HobbyEnum.READING;
            default:
                return null;
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for Major.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of Major.
     */
    private static MajorEnum convertMajor(String text)
    {
        switch (text)
        {
            case "Computer Science":
                return MajorEnum.CS;
            case "Other Engineering":
                return MajorEnum.ENGINEER;
            case "Math or CMDA":
                return MajorEnum.MATH;
            case "Other":
                return MajorEnum.OTHER;
            default:
                return null;
        }
    }


    /**
     * Just converts what is read in from the scanner, String,
     * to the appropriate enumeration value for State.
     * 
     * @param text
     *            the String read in from scanner.
     * @return the enumeration value of State.
     */
    private static StateEnum convertState(String text)
    {
        switch (text)
        {
            case "Northeast":
                return StateEnum.NE;
            case "Outside of United States":
                return StateEnum.OUT;
            case "United States (other than Southeast or Northwest)":
                return StateEnum.REST;
            case "Southeast":
                return StateEnum.SE;
            default:
                return null;
        }
    }


    /**
     * Helper function used to make a song object to add to a list.
     * 
     * @return Song the song made.
     */
    private static Song makeSong()
    {
        Song song = null;
        String line = scanner.nextLine();
        Scanner data = new Scanner(line);
        try
        {
            data.useDelimiter(COMMA_DELIMITER);
            String name = null;
            String artist = null;
            int year = 0;
            String genre = null;
            while (data.hasNext())
            {
                name = data.next();
                artist = data.next();
                year = Integer.parseInt(data.next());
                genre = data.next();
            }
            song = new Song(name, artist, year, genre);
        }
        finally
        {
            data.close();
        }
        return song;
    }


    /**
     * Creates a comparator with the sort parameter passed to the comparator.
     * Then sorts the array based on a switch case within the comparator.
     * 
     * @param sort
     *            this is the way in which to sort the list.
     * @return ArrayList<Song> this is the updated and sorted list.
     */
    private static ArrayList<Song> sortedList(SongSortingEnum sort)
    {
        SongComparator c = new SongComparator(sort);
        ArrayList<Song> sorted = array;
        sorted.sort(c);
        return sorted;
    }

}
